How to create Raspberry Pi Raspbian image for Dreamland:

1. Download and copy the latest version of wheezy onto an sd card
2. Insert SD card to the RPi, boot up, and ssh into the RPi.
3. Uncomment line "hdmi_force_hotplug=1" in /boot/config.txt
   (so the hdmi connector doesn't get disabled when nothing's plugged in)
4. In /etc/default/keyboard, change XKBLAYOUT="gb" to XKBLAYOUT="us"
   (useful when using a USB keyboard plugged into the RPi)
5. On the RPi: "sudo raspi-config"
	Select (8)Advanced options -> (A7)I2C
	    Would you like the ARM I2C interface to be enabled? -> <Yes>
	    Would you like the I2C kernel module to be loaded by default? -> <Yes>  
	Select option (1) Expand Filesystem
	(so partition fills all of available SD card space)

6. Select <Finish>, Reboot -> <Yes>
   After reboot ssh back into the RPi.
7. Update, then upgrade operation system: 
  (the RPi needs to be connected to the internet)
	sudo apt-get update
	sudo apt-get upgrade
8. Update other packages:
	sudo apt-get install -y avahi-daemon python3-pip python-zmq make autoconf automake libtool cython
9. sudo pip-3.2 install distribute --upgrade
10. sudo pip-3.2 install pyzmq  (this takes a while)
11. sudo apt-get install python-webpy (this also takes a while)
	Installs webpy for python2. Can't be installed for python3.
	(This is used for running some test demos.)
12. Check version of packages:
    pi@raspberrypi:~$ pip-3.2 freeze
	RPi.GPIO==0.5.11
	distribute==0.7.3
	mcpi==0.1.1
	numpy==1.6.2
	picamera==1.10
	pifacecommon==4.1.2
	pifacedigitalio==3.0.4
	pygame==1.9.2a0
	pyserial==2.5
	pyzmq==14.7.0
	wsgiref==0.1.2
   (Update as necessary: sudo pip-3.2 install XXXXX --upgrade)
14. Add to the end of /etc/modules: (e.g. "sudo nano /etc/modules")
			i2c-bcm2708
			i2c-dev
15. sudo reboot
16. sudo apt-get install i2c-tools
17. Verify that the RPi can talk the i2c protocol:
	pi@raspberrypi:~$ i2cdetect -y 1
     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
00:          -- -- -- -- -- -- -- -- -- -- -- -- -- 
10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
60: -- -- -- -- -- -- -- -- 68 -- -- -- -- -- -- -- 
70: -- -- -- -- -- -- -- --                         
	(The 68 will appear if the MPU-6050 chip is connected, otherwise "--")

18. sudo apt-get install python-smbus
	(This will install smbus for python2. Installation for python3 is below.)
19. cd ~
    mkdir repo
    cd repo
    git clone https://github.com/Dreamland2015/Dreamland.git
20. cd ~/repo/Dreamland/sensorDemo/i2c4python3/i2c-tools-3.1.0/py-smbus
21. sudo python3 setup.py build
22. sudo python3 setup.py install
23. Check that smbus is properly installed (note 2nd to last line):
	pi@raspberrypi:~$ pip-3.2 freeze
	RPi.GPIO==0.5.11
	distribute==0.7.3
	mcpi==0.1.1
	numpy==1.6.2
	picamera==1.10
	pifacecommon==4.1.2
	pifacedigitalio==3.0.4
	pygame==1.9.2a0
	pyserial==2.5
	pyzmq==14.7.0
	smbus==1.1
	wsgiref==0.1.2
	
24. sudo apt-get install supervisor exfat-fuse exfat-utils

25. sudo apt-get install vim

26. make sure inittab has this on end:
	T0:23:respan:/sbin/getty -L ttyAMA0 115200 vt100
	(this should already be uncommented)

27. change hostname to "DreamlandImage"

28. sudo apt-get install oracle-java7-jdk
    java -version

29. wget http://download.processing.org/processing-2.2.1-linux64.tgz
    tar xvzf processing-2.2.1-linux64.tgz
    rm -rf ~/processing-2.2.1/java 
    ln -s /usr/lib/jvm/jdk-7-oracle-armhf ~/processing-2.2.1/java
    
30. sudo rpi-update

31. sudo apt-get install screen

===============================================================
Adding Fadecandy server:
===============================================================

F1. cd ~/repo
    git clone git://github.com/scanlime/fadecandy
    cd fadcandy/server
    make submodules
    make
    sudo cp fcserver /usr/local/bin

F2. sudo nano /etc/rc.local
    Just above the final “exit 0” line, copy and paste the following:

    /usr/local/bin/fcserver /usr/local/bin/fcserver.json >/var/log/fcserver.log 2>&1 &

F3. sudo nano /usr/local/bin/fcserver.json
    Paste in the code shown at:
    https://learn.adafruit.com/1500-neopixel-led-curtain-with-raspberry-pi-fadecandy/fadecandy-server-setup

    This file needs to be changed to include the serial numbers of the fadecandy boards used, and the pixel layout.


===============================================================
At this point, the RPi has basic functionality.
Continue below to add wireless functionality:
===============================================================

Setting up wireless. Change the files below so their contents are like this:

W1. cat /etc/network/interfaces

	auto lo
	iface lo inet loopback
	
	auto eth0
	allow-hotplug eth0
	iface eth0 inet manual
	
	auto wlan0
	allow-hotplug wlan0
	iface wlan0 inet manual
	wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
	
	auto wlan1
	allow-hotplug wlan1
	iface wlan1 inet manual
	wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
	
W2. sudo cat /etc/wpa_supplicant/wpa_supplicant.conf

	ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
	update_config=1
	 
	network={
	        id_str="mhomenet"
	        ssid="mhomenet"
	        psk="MarcsWirelessNID"
	}
	
	network={
	        id_str="Flux Container"
	        ssid="Flux Container"
	        psk="Dreamland2015"
	        priority=5
	}



===============================================================
Testing and cloning:
===============================================================

Additional options at the end:

Opt1. Test accelerometer/gyro:
	1. cd ~/repo/Dreamland/sensorDemo/gyro_test/1_read_gyro_angle
	2. python3 gyrotest3.py
		(stop program with ctrl-C)

Opt2. Clone SD card image so it can be used on other RPis (see notes below)
   - good to do before expanding the file system (see option C below). 
     Use gzip or zip7 to compress image after cloning (so it takes less space).

=======
Notes:
=======
Useful software 
---------------
(Windows):
- Win32DiskImager (http://sourceforge.net/projects/win32diskimager/)
	Used to write Raspbian image to SD card
- Paragon ExtFS (https://www.paragon-software.com/home/extfs-windows/)
	Allows Windows to read and write disk partitions in ext format.
	The SD card has one small FAT32 partition with a small number of boot files, and a larger ext partition with all other files
- Angry IP scanner (http://angryip.org/download/#windows)
	Useful to check the local network for IP addresses of connected devices
	(requires installing Java)

	
Notes on step 1:
----------------
	a. Raspbian can be downloaded at https://www.raspberrypi.org/downloads/
	b. Using a laptop to write Raspbian image to SD card:
			Windows: use Win32DiskImager (http://sourceforge.net/projects/win32diskimager/)
			Mac: Follow instructions at (https://www.raspberrypi.org/documentation/installation/installing-images/mac.md):
				If you are comfortable with the command line, you can image a card without any additional software. Run:
				diskutil list
				Identify the disk (not partition) of your SD card e.g. disk4 (not disk4s1):
				diskutil unmountDisk /dev/<disk# from diskutil>
				e.g. diskutil unmountDisk /dev/disk4
				sudo dd bs=1m if=image.img of=/dev/<disk# from diskutil>
				e.g. sudo dd bs=1m if=2015-05-05-raspbian-wheezy.img of=/dev/disk4
				This may result in an dd: invalid number '1m' error if you have GNU coreutils installed. In that case you need to use 1M:
				sudo dd bs=1M if=image.img of=/dev/<disk# from diskutil>
				This will take a few minutes, depending on the image file size. You can check the progress by sending a SIGINFO signal pressing Ctrl+T.
				
Networking conf files:
----------------------
Files that may need to be changed to set up networking:
- /etc/networking/interfaces
- /etc/wpa_supplicant/wpa_supplicant.conf
- /etc/rc.local


